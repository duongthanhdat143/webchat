import { config as SQLConfig, ConnectionPool } from 'mssql';
import { Store as ExpressSessionStore } from 'express-session';
export interface StoreOptions {
    /**
     * Table to use as session store. Default: `[sessions]`
     */
    table?: string;
    /**
     * (Time To Live) Determines the expiration date. Default: `1000 * 60 * 60 * 24` (24 hours)
     */
    ttl?: number;
    /**
     * Determines if expired sessions should be autoremoved or not.
     * If value is `true` then a new function, `destroyExpired()`,
     * will autodelete expired sessions on a set interval. Default: `false`
     */
    autoRemove?: boolean;
    /**
     * Sets the timer interval for each call to `destroyExpired()`. Default: `1000 * 60 * 10` (10 min)
     */
    autoRemoveInterval?: number;
    /**
     * Is the callback function for `destroyExpired()`. Default: `undefined`
     */
    autoRemoveCallback?: (props: any) => any;
    /**
     * Determines if we are to use the `GETUTCDATE` instead of `GETDATE` Default: `true`
     */
    useUTC?: boolean;
}
export declare type ReadyCallback = (err?: any, callback?: any) => Promise<any>;
export interface IMSSQLStore {
    config: SQLConfig;
    options?: StoreOptions;
    databaseConnection: ConnectionPool | null;
    get(sid: string, callback: (err: any, session?: Express.SessionData | null) => void): void;
    set(sid: string, session: Express.SessionData, callback?: (err?: any) => void): void;
    touch(sid: string, session: Express.SessionData, callback?: (err?: any) => void): void;
    destroy(sid: string, callback?: (err?: any) => void): void;
    destroyExpired(callback?: Function): void;
    length(callback?: (err: any, length?: number | null) => void): void;
    clear(callback?: (err?: any) => void): void;
}
declare type TypeofExpressSessionStoreObject = {
    Store: TypeofExpressSessionStore;
};
declare type TypeofExpressSessionStore = typeof ExpressSessionStore;
declare const Store: (sessionData: TypeofExpressSessionStoreObject | {
    session: TypeofExpressSessionStoreObject;
}) => any;
export default Store;
